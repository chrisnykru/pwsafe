// TODO: get more test safes here: https://github.com/ronys/pypwsafe/tree/master/test_safes
package pwsafe

import (
	"errors"
	"testing"
	"time"
	"reflect"
)

var (
	invalidUTF8String string
)

func init() {
	invalidUTF8String = string([]byte{0xff, 0xfe, 0xfd})
}

func TestCalculateStretchedKey(t *testing.T) {
	iter := uint32(2048)
	salt := [32]byte{224, 70, 145, 8, 59, 173, 47, 241, 203, 157, 83, 209, 22, 55, 151, 157, 96, 234, 194, 167, 175, 251, 199, 145, 7, 219, 203, 168, 6, 166, 238, 241}

	key := calculateStretchedKey([]byte("password"), salt[:], iter, 0, nil)
	expectedKey := [32]byte{243, 201, 143, 194, 139, 58, 186, 186, 133, 14, 238, 200, 139, 153, 45, 247, 215, 251, 24, 49, 28, 170, 157, 181, 21, 174, 129, 231, 234, 62, 51, 203}
	if !reflect.DeepEqual(expectedKey, key) {
		t.Errorf("got %v, want %v", key, expectedKey)
        }
}

func TestParseV3Time(t *testing.T) {
	x := []byte{106, 23, 210, 7}
	ts, err := parseV3Time(x)
	if err != nil {
		t.Errorf("err = %v, want %v", err, nil)
	}
	want_ts := time.Unix(131209066, 0)
	if ts != want_ts {
		t.Errorf("ts = %v, want %v", ts, want_ts)
	}

	x = []byte{'6', 'A', '1', '7', 'D', '2', '0', '7'}
	ts, err = parseV3Time(x)
	if err != nil {
		t.Errorf("err = %v, want %v", err, nil);
	}
	if ts != want_ts {
		t.Errorf("ts = %v, want %v", ts, want_ts)
	}
}

func TestDeepCopyRecord(t *testing.T) {
	r := Record{
		UUID:           [16]byte{0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe},
		Group:          "testgroup",
		Title:          "testwebsite.com",
		Username:       "user123",
		Notes:          "little brown mouse",
		Pass:           "battery horse red stapler",
		CreationTime:   time.Date(2000, 1, 2, 8, 5, 30, 11, time.UTC),
		PassModTime:    time.Date(2000, 2, 3, 9, 6, 31, 12, time.UTC),
		LastAccessTime: time.Date(2000, 3, 4, 10, 7, 32, 13, time.UTC),
		LastModTime:    time.Date(2000, 4, 5, 11, 8, 33, 14, time.UTC),
		URL:            "https://testwebsite.com/",
		UnimplementedFields: []RawField{
			RawField{0x0b, []byte{0x2, 0x4, 0x6, 0x8}},
		},
	}
	r2 := r.deepCopy()
	if !reflect.DeepEqual(r, r2) {
		t.Errorf("r2 = %v, want %v", r2, r)
	}
}

func TestRecordBuilder(t *testing.T) {
	// Missing UUID
	rb := newRecordBuilder()
	rb.Pass = "bogus12345"
	rb.Title = "TitleBlah"
	_, err := rb.BuildAndReset()
	if err == nil {
		t.Errorf("err should not equal nil")
	}

	// Missing Title
	rb = newRecordBuilder()
	rb.SetUUID([]byte{0x1, 0x2, 0x3})
	rb.Pass = "bogus12345"
	_, err = rb.BuildAndReset()
	if err == nil {
		t.Errorf("err should not equal nil")
	}

	// Missing Pass
	rb = newRecordBuilder()
	copy(rb.UUID[:], []byte{0x1, 0x2, 0x3})
	rb.Title = "TitleBlah"
	_, err = rb.BuildAndReset()
	if err == nil {
		t.Errorf("err should not equal nil")
	}

	// Nothing missing
	rb = newRecordBuilder()
	rb.SetUUID([]byte{0x1, 0x2, 0x3})
	rb.Pass = "bogus12345"
	rb.Title = "TitleBlah"
	r, err := rb.BuildAndReset()
	if err != nil {
		t.Error(nil)
	}
	if r == nil {
		t.Errorf("r should not equal nil")
	}
}

func TestEncode(t *testing.T) {
	db, err := ReadFile("testdata/simple.psafe3", []byte("bogus12345"))
	if err != nil {
		t.Fatal(err)
	}
	encodedDB, err := db.Encode([]byte("bogus12345"), db.iter)
	if err != nil {
		t.Error(err)
	}
	db2, err := Decode(encodedDB, []byte("bogus12345"), 0, nil)
	if err != nil {
		t.Error(err)
	}

	if db.iter != db2.iter {
		t.Errorf("db.iter = %v, want %v", db.iter, db2.iter)
	}
	if db.hdr.UUID != db2.hdr.UUID {
		t.Errorf("db.hdr.UUID = %v, want %v", db.hdr.UUID, db2.hdr.UUID)
	}
	if db.hdr.Name != db2.hdr.Name {
		t.Errorf("db.hdr.Name = %v, want %v", db.hdr.Name, db2.hdr.Name)
	}
	if db.hdr.Description != db2.hdr.Description {
		t.Errorf("db.hdr.Description = %v, want %v", db.hdr.Description, db2.hdr.Description)
	}
	if !reflect.DeepEqual(db.hdr.UnimplementedFields, db2.hdr.UnimplementedFields) {
		t.Errorf("db.hdr.UnimplementedFields = %v, want %v", db.hdr.UnimplementedFields, db2.hdr.UnimplementedFields)
	}
	if !reflect.DeepEqual(db.records, db2.records) {
		t.Errorf("db.records = %v, want %v", db.records, db2.records)
	}

	db = new(PWSafeV3)
	_, err = db.Encode([]byte("bogus12345"), db.iter)
	if err != ErrInvalidDatabase {
		t.Errorf("err = %v, want %v", err, ErrInvalidDatabase)
	}
}

func TestSetters(t *testing.T) {
	db, err := ReadFile("testdata/simple.psafe3", []byte("bogus12345"))
	if err != nil {
		t.Fatal(err)
	}

	// SetUUID
	expectedUUID := [16]byte{0x3, 0x95, 0x85, 0xc3, 0x41, 0x9d, 0x4a, 0xb1, 0x99, 0x2, 0xf5, 0x38, 0xf7, 0xb7, 0xda, 0x1}
	if db.hdr.UUID != expectedUUID {
		t.Errorf("db.hdr.UUID = %v, want %v", db.hdr.UUID, expectedUUID)
	}

	newUUID := [16]byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf}
	db.SetUUID(newUUID)
	if db.hdr.UUID != newUUID {
		t.Errorf("db.hdr.UUID = %v, want %v", db.hdr.UUID, newUUID)
	}
	
	// SetName
	expectedName := ""
	if db.hdr.Name != expectedName {
		t.Errorf("db.hdr.Name = %v, want %v", db.hdr.Name, expectedName)
	}
	
	newName := "someDB_Name"
	err = db.SetName(newName)
	if err != nil {
		t.Error(err)
	}
	if db.hdr.Name != newName {
		t.Errorf("db.hdr.Name = %v, want %v", db.hdr.Name, newName)
	}
	
	err = db.SetName(invalidUTF8String)
	expectedErr := errors.New("string is not valid UTF8")
	if !reflect.DeepEqual(err, expectedErr) {
		t.Errorf("err = %v, want %v", err, expectedErr)
	}
	
	// SetDescription
	expectedDescription := ""
	if db.hdr.Description != expectedDescription {
		t.Errorf("db.hdr.Description = %v, want %v", db.hdr.Description, expectedDescription)
	}
	
	newDescription := "some new description"
	err = db.SetDescription(newDescription)
	if err != nil {
		t.Error(err)
	}
	if db.hdr.Description != newDescription {
		t.Errorf("db.hdr.Description = %v, want %v", db.hdr.Description, newDescription)
	}
	
	err = db.SetDescription(invalidUTF8String)
	expectedErr = errors.New("string is not valid UTF8")
	if !reflect.DeepEqual(err, expectedErr) {
		t.Errorf("err = %v, want %v", err, expectedErr)
	}
}

func TestSimpleDB(t *testing.T) {
	db, err := ReadFile("testdata/simple.psafe3", []byte("bogus12345"))
	if err != nil {
		t.Fatal(err)
	}

	records := []*Record{
		&Record{
			UUID:           [16]byte{0x67, 0xe0, 0x5e, 0x25, 0xa3, 0x3c, 0x42, 0x35, 0xb5, 0x71, 0x9c, 0xec, 0x9b, 0xd5, 0xe6, 0x41},
			Group:          "",
			Title:          "Test eight",
			Username:       "user8",
			Notes:          "shift double click action set = run command",
			Pass:           "my password",
			CreationTime:   time.Unix(1339168618, 0),
			LastModTime:    time.Unix(1339168764, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Time{}, // unset
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
				RawField{Kind: 0x17, Data: []byte{0x8, 0x0}},
			},
		},
		&Record{
			UUID:           [16]byte{0xe8, 0x74, 0x98, 0x80, 0x30, 0x94, 0x4b, 0xa6, 0xba, 0xd2, 0xa0, 0x3b, 0x75, 0x69, 0x7a, 0xc2},
			Group:          "",
			Title:          "Test Four",
			Username:       "user4",
			Notes:          "",
			Pass:           "pass4",
			CreationTime:   time.Unix(1311392620, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Unix(1311400802, 0),
			LastModTime:    time.Unix(1311907753, 0),
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0xa, Data: []byte{0xac, 0x1e, 0x22, 0x4f}},
				RawField{Kind: 0x10, Data: []byte{0x66, 0x30, 0x30, 0x30, 0x30, 0x30, 0x65, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31}},
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
			},
		},
		&Record{
			UUID:           [16]byte{0x7b, 0xed, 0xc6, 0x8b, 0x40, 0xa5, 0x43, 0x48, 0xbc, 0x2b, 0x33, 0xdc, 0x50, 0x77, 0x2b, 0xb3},
			Group:          "Test",
			Title:          "Test One",
			Username:       "user2",
			Notes:          "",
			Pass:           "password2",
			CreationTime:   time.Unix(1311386977, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Unix(1311400799, 0),
			LastModTime:    time.Unix(1311907737, 0),
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0xe, Data: []byte{0x66, 0x64, 0x61, 0x73}},
				RawField{Kind: 0xa, Data: []byte{0x12, 0x71, 0x33, 0x4e}},
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
				RawField{Kind: 0x12, Data: []byte{0x61, 0x73, 0x64, 0x66}},
			},
		},
		&Record{
			UUID:           [16]byte{0x30, 0xee, 0x4d, 0xac, 0x70, 0xc3, 0x41, 0x96, 0xb7, 0x9a, 0xa4, 0xbd, 0x95, 0x50, 0x85, 0xac},
			Group:          "",
			Title:          "Test seven",
			Username:       "user7",
			Email:          "",
			Notes:          "Symbols set for password generation",
			Pass:           "my password",
			CreationTime:   time.Unix(1339168618, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Time{}, // unset
			LastModTime:    time.Unix(1339168719, 0),
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0x10, Data: []byte{0x66, 0x30, 0x30, 0x30, 0x30, 0x30, 0x63, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31}},
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
				RawField{Kind: 0x16, Data: []byte{0x2b, 0x5f, 0x2d, 0x23, 0x24, 0x25}},
			},
		},
		&Record{
			UUID:           [16]byte{0xe4, 0x4b, 0x9f, 0xb9, 0xeb, 0x43, 0x49, 0xb7, 0xb2, 0xe1, 0x5, 0x85, 0x30, 0xc1, 0xb9, 0x43},
			Group:          "",
			Title:          "Test Two",
			Username:       "user3",
			Email:          "",
			Notes:          "",
			Pass:           "pass3",
			CreationTime:   time.Unix(1311386990, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Unix(1311400798, 0),
			LastModTime:    time.Unix(1311907761, 0),
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0x10, Data: []byte{0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x63, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31}},
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
			},
		},
		&Record{
			UUID:           [16]byte{0x15, 0x47, 0xfc, 0xd2, 0xe, 0x8c, 0x40, 0xdf, 0xaa, 0x4c, 0x10, 0x2a, 0x79, 0xe1, 0x26, 0x1b},
			Group:          "Test",
			Title:          "Test Nine",
			Username:       "user9",
			Email:          "",
			Notes:          "",
			Pass:           "DoubleClickActionTest",
			CreationTime:   time.Unix(1339362429, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Time{}, // unset
			LastModTime:    time.Time{}, // unset
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
				RawField{Kind: 0x13, Data: []byte{0x7, 0x0}},
			},
		},
		&Record{
			UUID:           [16]byte{0x53, 0xbe, 0x38, 0xd5, 0x83, 0x5, 0x46, 0x88, 0x9d, 0xe5, 0xd6, 0x77, 0x4a, 0xea, 0x0, 0xbe},
			Group:          "",
			Title:          "Test six",
			Username:       "user6",
			Email:          "",
			Notes:          "protected entry",
			Pass:           "my password",
			CreationTime:   time.Unix(1339168618, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Time{}, // unset
			LastModTime:    time.Unix(1339168666, 0),
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
				RawField{Kind: 0x15, Data: []byte{0x31}},
			},
		},
		&Record{
			UUID:           [16]byte{0x6e, 0xf5, 0xc1, 0xf3, 0x2c, 0xa5, 0x4e, 0x5, 0xa0, 0x93, 0x20, 0xc8, 0x98, 0x97, 0x3c, 0x15},
			Group:          "Test",
			Title:          "Test One",
			Username:       "user1",
			Email:          "",
			Notes:          "",
			Pass:           "password1",
			CreationTime:   time.Unix(1311386913, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Unix(1311400800, 0),
			LastModTime:    time.Unix(1311907724, 0),
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0x10, Data: []byte{0x62, 0x32, 0x30, 0x30, 0x30, 0x30, 0x62, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31}},
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
			},
		},
		&Record{
			UUID:           [16]byte{0xb8, 0xd, 0x5e, 0xfd, 0xb4, 0x6a, 0x4f, 0x5d, 0x88, 0xd2, 0xd5, 0x8a, 0xad, 0x22, 0xe, 0x17},
			Group:          "",
			Title:          "Test Five",
			Username:       "user5",
			Email:          "email@bogus.com",
			Notes:          "email address test",
			Pass:           "my password",
			CreationTime:   time.Unix(1339168618, 0),
			PassModTime:    time.Time{}, // unset
			LastAccessTime: time.Time{}, // unset
			LastModTime:    time.Time{}, // unset
			URL:            "",
			UnimplementedFields: []RawField{
				RawField{Kind: 0xf, Data: []byte{0x31, 0x66, 0x66, 0x30, 0x30}},
			},
		},
	}

	expectedDB := &PWSafeV3{
		isValid:       true,
		salt:          [32]byte{0x1e, 0xba, 0xbb, 0x79, 0xa4, 0x20, 0x87, 0x6b, 0x8a, 0xb8, 0x4f, 0x8d, 0xcd, 0xa, 0xfe, 0x26, 0x8f, 0x9, 0x2b, 0xc7, 0x1, 0xed, 0x87, 0xaf, 0xfe, 0x9d, 0x27, 0x6, 0x43, 0xc, 0x9f, 0x2e},
		iter:          uint32(2048),
		encryptionKey: [32]byte{0x40, 0x76, 0xca, 0x50, 0xb3, 0xb5, 0x81, 0xe1, 0xa1, 0x39, 0xe0, 0x53, 0xf, 0xed, 0x74, 0x56, 0x1a, 0x3a, 0x10, 0x4b, 0x53, 0xca, 0xf8, 0x80, 0xad, 0x66, 0xbf, 0xcf, 0x7a, 0xb1, 0x1c, 0x98},
		hmacKey:       [32]byte{0x70, 0xce, 0xd4, 0x36, 0xfa, 0xdc, 0x55, 0x64, 0x25, 0x9d, 0x1b, 0x8d, 0x19, 0xad, 0xa3, 0x63, 0x6, 0x67, 0x4f, 0x1e, 0x20, 0x3c, 0xe6, 0x19, 0x9d, 0xa4, 0x89, 0xcf, 0xf, 0xba, 0x92, 0xde},
		cbcIV:         [16]byte{0xb4, 0x7e, 0x79, 0x63, 0x95, 0x8b, 0xd6, 0x14, 0x54, 0x30, 0xa, 0xb9, 0x93, 0x1e, 0xdb, 0x36},
		stretchedKey:  [32]byte{0x62, 0x83, 0xbb, 0xea, 0x18, 0x6c, 0x54, 0xee, 0x66, 0xcb, 0x98, 0xc5, 0x41, 0x28, 0xea, 0xa, 0x1a, 0x24, 0x13, 0x14, 0xa3, 0xf4, 0x96, 0x15, 0xf2, 0xcb, 0x26, 0xae, 0x20, 0x5, 0xc7, 0x1b},
		hmac:          [32]byte{0x72, 0xf2, 0x8e, 0x19, 0x1, 0x51, 0xcb, 0x8f, 0xd1, 0x8b, 0xdc, 0x9, 0xfc, 0xa5, 0xf2, 0xb2, 0xb9, 0xd3, 0x24, 0xb9, 0x76, 0xfc, 0xb5, 0xe2, 0x5c, 0x64, 0x22, 0x1b, 0xaa, 0xa4, 0x0, 0x81},
		hdr: Header{
			Version:           uint16(0x309),
			UUID:              [16]byte{0x3, 0x95, 0x85, 0xc3, 0x41, 0x9d, 0x4a, 0xb1, 0x99, 0x2, 0xf5, 0x38, 0xf7, 0xb7, 0xda, 0x1},
			Name:              "",
			Description:       "",
			LastSaveTimestamp: time.Unix(1339362429, 0),
			LastSaveByUser:    "gpmidi",
			LastSaveOnHost:    "GP-GAMING",
			LastSaveByWhat:    "Password Safe V3.26",
			UnimplementedFields: []RawField{
				RawField{
					Kind: 0x2,
					Data: []byte{0x42, 0x20, 0x31, 0x20, 0x31, 0x20, 0x42, 0x20, 0x32, 0x20, 0x31, 0x20, 0x42, 0x20, 0x32, 0x38, 0x20, 0x31, 0x20, 0x42, 0x20, 0x32, 0x39, 0x20, 0x31, 0x20, 0x42, 0x20, 0x33, 0x31, 0x20, 0x31, 0x20, 0x42, 0x20, 0x35, 0x30, 0x20, 0x30, 0x20, 0x49, 0x20, 0x31, 0x31, 0x20, 0x32, 0x20, 0x49, 0x20, 0x31, 0x32, 0x20, 0x32, 0x35, 0x35, 0x20, 0x49, 0x20, 0x31, 0x37, 0x20, 0x31, 0x20, 0x49, 0x20, 0x31, 0x38, 0x20, 0x31, 0x20, 0x49, 0x20, 0x31, 0x39, 0x20, 0x31, 0x20, 0x49, 0x20, 0x32, 0x30, 0x20, 0x31, 0x20},
				},
				RawField{
					Kind: 0x3,
					Data: []byte{0x31},
				},
				RawField{
					Kind: 0xf,
					Data: []byte{0x30, 0x38, 0x65, 0x34, 0x34, 0x62, 0x39, 0x66, 0x62, 0x39, 0x65, 0x62, 0x34, 0x33, 0x34, 0x39, 0x62, 0x37, 0x62, 0x32, 0x65, 0x31, 0x30, 0x35, 0x38, 0x35, 0x33, 0x30, 0x63, 0x31, 0x62, 0x39, 0x34, 0x33, 0x37, 0x62, 0x65, 0x64, 0x63, 0x36, 0x38, 0x62, 0x34, 0x30, 0x61, 0x35, 0x34, 0x33, 0x34, 0x38, 0x62, 0x63, 0x32, 0x62, 0x33, 0x33, 0x64, 0x63, 0x35, 0x30, 0x37, 0x37, 0x32, 0x62, 0x62, 0x33, 0x36, 0x65, 0x66, 0x35, 0x63, 0x31, 0x66, 0x33, 0x32, 0x63, 0x61, 0x35, 0x34, 0x65, 0x30, 0x35, 0x61, 0x30, 0x39, 0x33, 0x32, 0x30, 0x63, 0x38, 0x39, 0x38, 0x39, 0x37, 0x33, 0x63, 0x31, 0x35, 0x65, 0x38, 0x37, 0x34, 0x39, 0x38, 0x38, 0x30, 0x33, 0x30, 0x39, 0x34, 0x34, 0x62, 0x61, 0x36, 0x62, 0x61, 0x64, 0x32, 0x61, 0x30, 0x33, 0x62, 0x37, 0x35, 0x36, 0x39, 0x37, 0x61, 0x63, 0x32, 0x62, 0x38, 0x30, 0x64, 0x35, 0x65, 0x66, 0x64, 0x62, 0x34, 0x36, 0x61, 0x34, 0x66, 0x35, 0x64, 0x38, 0x38, 0x64, 0x32, 0x64, 0x35, 0x38, 0x61, 0x61, 0x64, 0x32, 0x32, 0x30, 0x65, 0x31, 0x37, 0x35, 0x33, 0x62, 0x65, 0x33, 0x38, 0x64, 0x35, 0x38, 0x33, 0x30, 0x35, 0x34, 0x36, 0x38, 0x38, 0x39, 0x64, 0x65, 0x35, 0x64, 0x36, 0x37, 0x37, 0x34, 0x61, 0x65, 0x61, 0x30, 0x30, 0x62, 0x65, 0x33, 0x30, 0x65, 0x65, 0x34, 0x64, 0x61, 0x63, 0x37, 0x30, 0x63, 0x33, 0x34, 0x31, 0x39, 0x36, 0x62, 0x37, 0x39, 0x61, 0x61, 0x34, 0x62, 0x64, 0x39, 0x35, 0x35, 0x30, 0x38, 0x35, 0x61, 0x63, 0x36, 0x37, 0x65, 0x30, 0x35, 0x65, 0x32, 0x35, 0x61, 0x33, 0x33, 0x63, 0x34, 0x32, 0x33, 0x35, 0x62, 0x35, 0x37, 0x31, 0x39, 0x63, 0x65, 0x63, 0x39, 0x62, 0x64, 0x35, 0x65, 0x36, 0x34, 0x31},
				},
			},
		},
		records: records,
	}
	if !reflect.DeepEqual(db, expectedDB) {
		t.Errorf("db = %v, want %v", db, expectedDB)
	}
}
